openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3000/v1/api
    description: Development server
tags:
  - name: authentication
    description: API for Authentication
paths:
  /login:
    post:
      tags:
        - authentication
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              example:
                email: "user123"
                password: "userpassword"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
                status: 200
                message: "Login successfully"
                metadata:
                  user:
                    user_id: "f1ae9467-559d-4279-9348-7e6bdc4f5db1"
                    username: "username1"
                  token:
                    accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJmMWFlOTQ2Ny01NTlkLTQyNzktOTM0OC03ZTZiZGM0ZjVkYjEiLCJ1c2VybmFtZSI6InBoYW52YW5uaGFuIiwiaWF0IjoxNzIzNjUxNDg3LCJleHAiOjE3MjM2NTE0OTB9.VGaWmRp3jZcl2nzMWUzzoAMbQUCxrhkVvSXJ6Lqshb4"
                    refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJmMWFlOTQ2Ny01NTlkLTQyNzktOTM0OC03ZTZiZGM0ZjVkYjEiLCJ1c2VybmFtZSI6InBoYW52YW5uaGFuIiwiaWF0IjoxNzIzNjUxNDg3LCJleHAiOjE3MjM2NjE4NTV9.co-V3og0YJ6prECOqW4HPBoRzQR4_LIj3X3LKlLVMFU"

        "400":
          description: Invalid username or password
  /logout:
    get:
      tags:
        - authentication
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters:
        - in: header
          name: x-client-id
          required: true
          description: id of user
          schema:
            type: string
            example: "329cd4de-e687-4db1-bf00-ea8078359bfe"
      responses:
        default:
          description: successful operation
      security:
        - access_token: []

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
    ApiResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
        metadata:
          type: object
      xml:
        name: "##default"
  requestBodies:
    # Pet:
    #   description: Pet object that needs to be added to the store
    #   content:
    #     application/json:
    #       schema:
    #         $ref: '#/components/schemas/Pet'
    #     application/xml:
    #       schema:
    #         $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    access_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
